/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "nsISupports.idl"

%{C++
#define NS_SIGNEDPACKAGEVERIFIER_CONTRACTID "@mozilla.org/network/signed-package-verifier;1"
%}

/**
 * A package using privileged APIs should be signed by marketplace or trust-
 * worthy developers. When Necko receives such a package, it has to
 * extract the manifest and the signature and calls verifyManifest(...) to verify
 * the manifest. An nsISignedPackagedVerifier will parse the manifest and
 * store the hash values of each resource. When a resource is ready, Necko
 * will calculate its hash value (including the header like Content-Location: xxx),
 * and calls checkIntegrity(...) to verify the integrity.
 *
 * For more detail:
 *   https://wiki.mozilla.org/User:Ptheriault/Packagedprivilegedcontent
 */

[scriptable, uuid(eafd2113-0dc8-4e5e-a3d8-f639635f0384)]
interface nsISignedPackageVerifier : nsISupports
{
  /**
   * @aHeader is the package's header including
   *   - "manifest-signature: xxxxxx (base64 encoding)
   * @aManifest is the manifest of the package
   *   - manifest must be the first resource of the package
   */
  boolean verifyManifest(in ACString aHeader, in ACString aManifest);

  /**
   * @aFileName is the name of a resource in the package
   * @aHashValue is the hash value of this resource named aFileName
   *   - aHashValue should be computed by the caller of this method
   */
  boolean checkIntegrity(in AString aFileName, in AString aHashValue);
};
